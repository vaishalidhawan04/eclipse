package recursion_lec7;

public class Queen_Combination {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=4;
		int tq=2;
		boolean[] board= new boolean[4];
		Permutation(board,tq,0,"",0);
	}
	public static void Permutation(boolean[] board, int tq, int QueenplacedSoFar , String ans,int i) {
		if(QueenplacedSoFar==tq) {
			System.out.println(ans);
			return;
		}
		for(;i<board.length; i++) {
			if(board[i]==false) {
				board[i]=true;
				Permutation(board,tq,QueenplacedSoFar+1, ans+ "b" + i + "q" + QueenplacedSoFar, i+1);
				board[i]=false;//this is an undo step and this is called backtracking
			}
		}
//		for(int i=0;i<board.length; i++) {
//			if(board[i]==false && QueenplacedSoFar!=0) {
//				board[i]=true;
//				Permutation(board,tq,QueenplacedSoFar+1, ans+ "b" + i + "q" + QueenplacedSoFar);
//				board[i]=false;//this is an undo step and this is called backtracking
//			}
//		}
	}
}
